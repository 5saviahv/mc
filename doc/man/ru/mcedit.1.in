.TH MCEDIT 1 "May 2010" "MC Version 4.7.x" "GNU Midnight Commander"
.SH "НАИМЕНОВАНИЕ"
mcedit \- встроенные редактор файлов в GNU Midnight Commander.
.SH "ИСПОЛЬЗОВАНИЕ"
.B mcedit
[\-bcCdfhstVx?] [+номер строки] ИмяФайла
.PP
.B mcedit
[\-bcCdfhstVx?] file:номер строки[:]
.SH "ОПИСАНИЕ"
.LP
mcedit это символическая ссылка на
.BR mc ,
главный исполняемый файл GNU Midnight Commander.
Вызов GNU Midnight Commander при помощи данного имени
запускает внутренний редактор и открывает
.I file
файл указанный в командной строке. Редактор основан на консольной версии редактора
.B cooledit
\- независимой программы написанной под X Window System.
.SH "ПАРАМЕТРЫ"
.TP
.I "+номер строки"
Перейти на строку с указанным номером (не ставьте пробел между символом
.I "+"
и числом).
.TP
.I "\-b"
Принудительное переключение в чёрно-белый режим.
.TP
.I "\-c"
Принудительное переключение в режим ANSI на терминалах которые,
вероятно, не имеют поддержки  цветов.
.TP
.I "\-C <keyword>=<FGcolor>,<BGcolor>:<keyword>= ..."
Переопределение цветовой схемы. Дополнительная информация в разделе
.B Colors ,
в man mc (1)
.TP
.I "\-d"
Отключить поддержку мыши.
.TP
.I "\-f"
Отобразить вкомпилированный путь поиска файлов данных GNU Midnight Commander.
.TP
.I "\-t"
Принудительное использование базы termcap вместо terminfo.
Эта опция применяется только если GNU Midnight Commander
был скомпилирован с библиотекой S\-Lang c включенной поддержкой terminfo.
.TP
.I "\-V"
Вывод версии программы.
.TP
.I "\-x"
Принудительное включение режима xterm. Используется при работе в
xterm\-совместимых терминалах (двух оконный режим и возможность отправлять
сообщения мыши в виде escape\-последовательностей).
.SH "ОСОБЕННОСТИ"
Встроенный редактор это полнофункциональный полно-экранный редактор.
Позволяет редактировать файлы размером не более 64 мегабайт. Также можно
редактировать бинарные файлы. Функции которые в настоящее время поддерживаются:
копирование, перемещение, удаление, вырезка, вставка помеченного текста;
операция отмены; выпадающее меню; вставка текста из файла; макросы, регулярные
выражения поиска и замены; выделение текста с помощью Shift\-стрелки  (если
поддерживается терминалом); режим замены текста при вводе; авто\-перенос слов;
авто-отступ; настраиваемый размер табуляции; подсветка синтаксиса для различных
типов файлов, а также возможность передачи текстовых блоков через pipe, для
дальнейшей обработки внешними утилитами такими как indent или ispell.
.SH "КЛЮЧИ"
Редактор прост в использовании и может использоваться без предварительного
изучения документации. Выпадающее меню вызывается клавишей F9. В меню программы
и в нижней панели вы сможете ознакомиться также и с другими "горячими" клавишами.
.PP
Дополнительно к этому вы можете использовать клавишу Shift совместно со
стрелками для пометки текста (если поддерживается терминалом):
.B Ctrl\-Ins
копирует помеченный текст в файл
.BR ~/.mc/cedit/cooledit.clip ,
.B Shift\-Ins
вставляет содержимое
.BR ~/.mc/cedit/cooledit.clip ,
.B Shift\-Del
вырезает помеченное в файл
.BR ~/.mc/cedit/cooledit.clip ,
и
.B Ctrl\-Del
удаляет помеченный текст. Также на некоторых терминалах работает
выделение с помощью мыши . Для стандартной для терминалов пометки,
удерживайте клавишу Shift. Пожалуйста имейте ввиду что стандартная
пометка текста не распространяется на клипборд
.BR mcedit .
.PP
Функция дополнения текста (сочетание
.B "Meta\-Tab"
или
.BR "Escape Tab" )
завершает слово под курсором с использованием слов которые уже использовались
ранее в данном файле.
.PP
To define a macro, press
.B Ctrl\-R
and then type out the keys you want to be executed.  Press
.B Ctrl\-R
again when finished.  You can then assign the macro to any key you like
by pressing that key.  The macro is executed when you press
.B Ctrl\-A
and then the assigned key.  The macro is also executed if you press
Meta, Ctrl, or Esc and the assigned key, provided that the key is not
used for any other function.  The macro commands are stored in the file
.BR ~/.mc/cedit/cooledit.macros .
Do NOT edit this file if you are going to use macros again in the same
editing session, because
.B mcedit
caches macro key defines in memory.
.B mcedit
now overwrites a macro if a macro with the same key already exists,
so you won't have to edit this file. You will also have to restart
other running editors for macros to take effect.
.P
.B F19
F19 позволит отформатировать помеченный код на языках C, C++, Java или HTML.
Этим занимается скрипт
.B ~/.mc/cedit/edit.indent.rc
созданный из готового шаблона. Вы можете изменить его так как вам будет удобнее.
.PP
.B C\-p
запустит ispell для блока текста. Будет выполнен скрипт
.BR ~/.mc/cedit/edit.spell.rc .
.PP
В случае, если какие-либо клавиши не работают, Вы можете воспользоваться диалогом
.B "Распознавание клавиш"
в меню 
.B  "Настройки"
.SH CODE NAVIGATION
.B mcedit
can be used to navigation through code with tags files created by etags
or ctags commands. If there is no file TAGS code navigation would not work.
In example, in case of exuberant\-ctags for C language command will be:
.PP
ctags \-e \-\-language\-force=C \-R ./
.PP
.B Meta\-Enter 
show list box to select item under cursor (cusor should stand at end of
word).
.PP
.B Meta\-Minus 
where minus is symbol "\-" go to previous function in navigation list (like a browser
Back).
.PP
.B Meta\-Equal
where equal is symbol "=" go to next function in navigation list (like a browser
Forward).
.PP
.SH SYNTAX HIGHLIGHTING
.B mcedit
supports syntax highlighting.  This means that keywords and contexts
(like C comments, string constants, etc) are highlighted in different
colors.  The following section explains the format of the file
.BR ~/.mc/cedit/Syntax .
If this file is missing, system\-wide
.B @prefix@/share/mc/syntax/Syntax
is used.
The file
.B ~/.mc/cedit/Syntax
is rescanned on opening of a any new editor file.  The file contains
rules for highlighting, each of which is given on a separate line, and
define which keywords will be highlighted to what color.
.PP
The file is divided into sections, each beginning with a line with the
.B file
command.  The sections are normally put into separate files using the
.B include
command.
.PP
The
.B file
command has three arguments.  The first argument is a regular expression
that is applied to the file name to determine if the following section
applies to the file.  The second argument is the description of the file
type.  It is used in
.BR cooledit ;
future versions of
.B mcedit
may use it as well.  The third optional argument is a regular expression
to match the first line of text of the file.  The rules in the following
section apply if either the file name or the first line of text matches.
.PP
A section ends with the start of another section.  Each section is
divided into contexts, and each context contains rules.  A context is a
scope within the text that a particular set of rules belongs to.  For
instance, the text within a C style comment (i.e. between
.B /*
and
.BR */ )
has its own color.  This is a context, although it has no further rules
inside it because there is probably nothing that we want highlighted
within a C comment.
.PP
A trivial C programming section might look like this:
.PP
.nf
file .\\*\\\\.c C\\sProgram\\sFile (#include|/\\\\\\*)

wholechars abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_

# default colors
define  comment   brown
context default
  keyword  whole  if       yellow
  keyword  whole  else     yellow
  keyword  whole  for      yellow
  keyword  whole  while    yellow
  keyword  whole  do       yellow
  keyword  whole  switch   yellow
  keyword  whole  case     yellow
  keyword  whole  static   yellow
  keyword  whole  extern   yellow
  keyword         {        brightcyan
  keyword         }        brightcyan
  keyword         '*'      green

# C comments
context /\\* \\*/ comment

# C preprocessor directives
context linestart # \\n red
  keyword  \\\\\\n  brightred

# C string constants
context " " green
  keyword  %d    brightgreen
  keyword  %s    brightgreen
  keyword  %c    brightgreen
  keyword  \\\\"   brightgreen
.fi
.PP
Each context starts with a line of the form:
.PP
.B context
.RB [ exclusive ]
.RB [ whole | wholeright | wholeleft ]
.RB [ linestart ]
.I delim
.RB [ linestart ]
.I delim
.RI [ foreground ]
.RI [ background ]
.PP
The first context is an exception.  It must start with the command
.PP
.B context default
.RI [ foreground ]
.RI [ background ]
.PP
otherwise
.B mcedit
will report an error.  The
.B linestart
option specifies that
.I delim
must start at the beginning of a line.  The
.B whole
option tells that
.I delim
must be a whole word.  To specify that a word must begin on the word
boundary only on the left side, you can use the
.B wholeleft
option, and similarly a word that must end on the word boundary is specified by
.BR wholeright .
.PP
The set of characters that constitute a whole word can be changed at any
point in the file with the
.B wholechars
command.  The left and right set of characters can be set separately
with
.PP
.B wholechars
.RB [ left | right ]
.I characters
.PP
The
.B exclusive
option causes the text between the delimiters to be highlighted, but not
the delimiters themselves.
.PP
Each rule is a line of the form:
.PP
.B keyword
.RB [ whole | wholeright | wholeleft ]
.RB [ linestart ]
.I string foreground
.RI [ background ]
.PP
Context or keyword strings are interpreted, so that you can include tabs
and spaces with the sequences \\t and \\s.  Newlines and backslashes are
specified with \\n and \\\\ respectively.  Since whitespace is used as a
separator, it may not be used as is.  Also, \\* must be used to specify
an asterisk.  The * itself is a wildcard that matches any length of
characters.  For example,
.PP
.nf
  keyword         '*'      green
.fi
.PP
colors all C single character constants green.  You also could use
.PP
.nf
  keyword         "*"      green
.fi
.PP
to color string constants, but the matched string would not be allowed
to span across multiple newlines.  The wildcard may be used within
context delimiters as well, but you cannot have a wildcard as the last
or first character.
.PP
Important to note is the line
.PP
.nf
  keyword  \\\\\\n  brightgreen
.fi
.PP
This line defines a keyword containing the backslash and newline
characters.  Since the keywords are matched before the context
delimiters, this keyword prevents the context from ending at the end of
the lines that end in a backslash, thus allowing C preprocessor
directive to continue across multiple lines.
.PP
The possible colors are: black, gray, red, brightred, green,
brightgreen, brown, yellow, blue, brightblue, magenta, brightmagenta,
cyan, brightcyan, lightgray and white.  If the syntax file is shared
with
.BR cooledit ,
it is possible to specify different colors for
.B mcedit
and
.B cooledit
by separating them with a slash, e.g.
.PP
.nf
keyword  #include  red/Orange
.fi
.PP
.B mcedit
uses the color before the slash.  See cooledit(1) for supported
.B cooledit
colors.
.PP
Comments may be put on a separate line starting with the hash sign (#).
.PP
If you are describing case insensitive language you need to use
.B caseinsensitive
derective. It should be specified at the begining of syntax file.
.PP
Because of the simplicity of the implementation, there are a few
intricacies that will not be dealt with correctly but these are a minor
irritation.  On the whole, a broad spectrum of quite complicated
situations are handled with these simple rules.  It is a good idea to
take a look at the syntax file to see some of the nifty tricks you can
do with a little imagination.  If you cannot get by with the rules I
have coded, and you think you have a rule that would be useful, please
email me with your request.  However, do not ask for regular expression
support, because this is flatly impossible.
.PP
A useful hint is to work with as much as possible with the things you
can do rather than try to do things that this implementation cannot deal
with.  Also remember that the aim of syntax highlighting is to make
programming less prone to error, not to make code look pretty.
.SH COLORS
The default colors may be changed by appending to the
.B MC_COLOR_TABLE
environment variable.  Foreground and background colors pairs may be
specified for example with:
.PP
.nf
MC_COLOR_TABLE="$MC_COLOR_TABLE:\\
editnormal=lightgray,black:\\
editbold=yellow,black:\\
editmarked=black,cyan"
.fi
.SH OPTIONS
Most options can now be set from the editors options dialog box.  See
the
.B Options
menu.  The following options are defined in
.B ~/.mc/ini
and have obvious counterparts in the dialog box.  You can modify them to
change the editor behavior, by editing the file.  Unless specified, a 1
sets the option to on, and a 0 sets it to off, as is usual.
.TP
.I use_internal_edit
This option is ignored when invoking
.BR mcedit .
.TP
.I editor_tab_spacing
Interpret the tab character as being of this length.
Default is 8. You should avoid using
other than 8 since most other editors and text viewers
assume a tab spacing of 8. Use
.B editor_fake_half_tabs
to simulate a smaller tab spacing.
.TP
.I editor_fill_tabs_with_spaces
Never insert a tab space. Rather insert spaces (ascii 20h) to fill to the
desired tab size.
.TP
.I editor_return_does_auto_indent
Pressing return will tab across to match the indentation
of the first line above that has text on it.
.TP
.I editor_backspace_through_tabs
Make a single backspace delete all the space to the left
margin if there is no text between the cursor and the left
margin.
.TP
.I editor_fake_half_tabs
This will emulate a half tab for those who want to program
with a tab spacing of 4, but do not want the tab size changed
from 8 (so that the code will be formatted the same when displayed
by other programs). When editing between text and the left
margin, moving and tabbing will be as though a tab space were
4, while actually using spaces and normal tabs for an optimal fill.
When editing anywhere else, a normal tab is inserted.
.TP
.I editor_option_save_mode
Possible values 0, 1 and 2.  The save mode (see the options menu also)
allows you to change the method of saving a file.  Quick save (0) saves
the file by immediately, truncating the disk file to zero length (i.e.
erasing it) and the writing the editor contents to the file.  This
method is fast, but dangerous, since a system error during a file save
will leave the file only partially written, possibly rendering the data
irretrievable.  When saving, the safe save (1) option enables creation
of a temporary file into which the file contents are first written.  In
the event of an problem, the original file is untouched.  When the
temporary file is successfully written, it is renamed to the name of the
original file, thus replacing it.  The safest method is create backups
(2).  Where a backup file is created before any changes are made.  You
can specify your own backup file extension in the dialog.  Note that
saving twice will replace your backup as well as your original file.
.TP
.I editor_word_wrap_line_length
line length to wrap. 72 default.
.TP
.I editor_backup_extension
symbol for add extension to name of backup files. Default "~".
.TP
.I editor_line_state
show state line of editor now it show number of file line (in future it
can show things like folding, breakpoints, etc.). M\-n toglle this option.
.TP
.I editor_visible_spaces
Toggle show visible trailing spaces (TWS), if editor_visible_spaces=1 TWS
showed as '.'
.TP
.I editor_visible_tabs
Toggle show visible tabs, if editor_visible_tabs=1 tabs showed as '<\-\-\-\->'
.TP
.I editor_persistent_selections
Do not remove block selection after moving the cursor.
.TP
.I editor_cursor_beyond_eol
Allow moving cursor beyond the end of line.
.TP
.I editor_syntax_highlighting
enable syntax highlighting.
.TP
.I editor_edit_confirm_save
show confirm dialog on save.
.TP
.I editor_option_typewriter_wrap
to be described
.TP
.I editor_option_auto_para_formatting
to be described
.TP
.I editor_option_save_position
save file position on exit.
.TP
.I source_codepage
symbol representation of codepage name for file (i.e. CP1251, ~ \- default).
.TP
.I editor_wordcompletion_collect_entire_file
Search autocomplete candidates in entire of file or just from
begin of file to cursor position (0)

.SH MISCELLANEOUS
You can use scanf search and replace to search and replace a C format
string.  First take a look at the
.B sscanf
and
.B sprintf
man pages to see what a format string is and how it works.  Here's an
example: suppose that you want to replace all occurrences of an open
bracket, three comma separated numbers, and a close bracket, with the
word
.IR apples ,
the third number, the word
.I oranges
and then the second number.  You would fill in the Replace dialog box as
follows:
.PP
.nf
.B Enter search string
(%d,%d,%d)
.B Enter replace string
apples %d oranges %d
.B Enter replacement argument order
3,2
.fi
.PP
The last line specifies that the third and then the second number are to
be used in place of the first and second.
.PP
It is advisable to use this feature with Prompt On Replace on, because a
match is thought to be found whenever the number of arguments found
matches the number given, which is not always a real match. Scanf also
treats whitespace as being elastic.  Note that the scanf format %[ is
very useful for scanning strings, and whitespace.
.PP
The editor also displays non\-us characters (160+).  When editing
binary files, you should set
.B display bits
to 7 bits in the Midnight Commander options menu to keep the spacing
clean.
.SH ФАЙЛЫ
.I @prefix@/share/mc/mc.hlp
.IP
Файл помощи для этой программы.
.PP
.I @prefix@/share/mc/mc.ini
.IP
Стандартные системные настройки для  GNU Midnight
Commander используются только в случае отсутствия пользоватьлеского файла ~/.mc/ini.
.PP
.I @prefix@/share/mc/mc.lib
.IP
Глобальные настройки для Midnight Commander. Настройки в этом файле влияют
на всех пользователей, в независимости от наличия ~/.mc/ini.
.PP
.I @prefix@/share/mc/syntax/*
.IP
Глобальные файлы синтаксиса, используются только в случае, если аналогичный
файл отсутствует в ~/.mc/cedit/.
.PP
.I $HOME/.mc/ini
.IP
Личные настройки пользователя. Если файл существует, то он будет
использоваться вместо глобальных настроек.
.PP
.I $HOME/.mc/cedit/
.IP
Пользовательский каталог, где сохраняется и обрабатывается помеченный текст.
.SH ЛИЦЕНЗИЯ
Эта программа распространяется в надежде, что она будет полезной,
но БЕЗ ВСЯКИХ ГАРАНТИЙ, в том числе подразумеваемых гарантий ТОВАРНОГО
СОСТОЯНИЯ ПРИ ПРОДАЖЕ и ГОДНОСТИ ДЛЯ ОПРЕДЕЛЁННОГО ПРИМЕНЕНИЯ. Смотрите
Стандартную Общественную Лицензию GNU для получения дополнительной
информации. Полный текст лицензии смотрите на http://www.gnu.org/licenses/.
.SH ДОСТУПНОСТЬ
Последняя версия программы может быть найдена на
http://midnight\-commander.org/.
.SH СМОТРИ ТАКЖЕ
cooledit(1), mc(1), gpm(1), terminfo(1), scanf(3).
.SH АВТОРЫ
Paul Sheer (psheer@obsidian.co.za) - создатель встроенного редактора Midnight Commander.
Ilia Maslakov (il.smind@gmail.com)
Mikhail Pobolovets (styx.mp@gmail.com)
.SH ОШИБКИ
Вы можете оставить сообщение об ошибках на http://www.midnight-commander.org/
или отправить письмо на mc-devel (at) gnome (dot) org
